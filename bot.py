 # -*- coding: utf-8 -*-

# QUESTION:
#  –ù–∞–º –Ω—É–∂–Ω—ã –≤–æ–ø—Ä–æ—Å—ã:
#  1. –ì–¥–µ —Ç—ã —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?
#  2. –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ?
#  3. –ú–æ–∂–µ—à—å –ª–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞—Ç—å ( —Ñ—É–ª–ª/–ø–∞—Ä—Ç/–Ω–µ—Ç)?
#  4. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ª–∏ —Ç–µ–±–µ –∫–∞–∫–∞—è-—Ç–æ –æ—Ä–≥ –ø–æ–º–æ—â—å?

# Import Library
import telegram
import telebot
import pandas as pd
import os.path
import configparser

import today_box

from telebot import types
from datetime import date
from datetime import datetime

config = configparser.ConfigParser()
config.read('config.ini')

bot = telebot.TeleBot(config.get('TOKEN','telegram-bot'))
print("\nToday's date:", date.today())

# init user-employee
@bot.message_handler(commands=["start"])
def start(m, res=False):
    bot.send_message(m.chat.id,
                     '‚úåÔ∏è *–ü—Ä–∏–≤—ñ—Ç* –¶–µ S-PRO –ø–µ—Ä–µ–∫–ª–∏—á–∫–∞.\n–•–æ—á–µ—Ç—å—Å—è –±—É—Ç–∏ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É –∑ –Ω–∞—à–æ—é –≤–µ–ª–∏–∫–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∫–æ–º–∞–Ω–¥–æ—é —É —Ç–∞–∫–∏–π —á–∞—Å. \n\n–¶–µ–π –±–æ—Ç –±—É–¥–µ —â–æ–¥–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Ç–æ–±—ñ —á–æ—Ç–∏—Ä–∏ –ø–∏—Ç–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –Ω–∏—Ö –¥–æ 12:00, –∞–±–∏ HR –∫–æ–º–∞–Ω–¥–∞ –º–æ–≥–ª–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —Ç–∞, –∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ, –¥–æ–ø–æ–º–æ–≥—Ç–∏. \n\n–ù–∞—Ç–∏—Å–∫–∞–π –∫–æ–º–∞–Ω–¥—É üîª /today üîª —ñ –ø—Ä–æ—Ö–æ–¥—å –ø–µ—Ä–µ–∫–ª–∏—á–∫—É —Å—å–æ–≥–æ–¥–Ω—ñ :)',
                     parse_mode=telegram.ParseMode.MARKDOWN)

    user = {'date': date.today(),
            'time':	datetime.now().strftime("%H:%M:%S"),
            'username': m.chat.username,
            'event': 'connect',
            'event_description': 'done',
            'first_name': m.chat.first_name,
            'last_name': m.chat.last_name,
            'chat_id': m.chat.id}

    # Show new connection:
    print("\ndate:", date.today(), '\ntime ',	datetime.now().strftime("%H:%M:%S"), " | –ó–∞–∫–æ–Ω–µ–∫—Ç–∏–≤—Å—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ | ",  m.chat.username)

    if(os.path.exists('data.csv') == True):
        df = pd.read_csv("data.csv").append(user, ignore_index = True)
        df.to_csv("data.csv", index=False)
    else:
        print("Error: not find data.csv")


# COMMAND: today
# send questions for answer
@bot.message_handler(commands=["today"])
def today(m, res=False):
    today_box.today_send(m.chat.id)


# Question: Can you work today?
# SAVE ANSWER
@bot.callback_query_handler(lambda call: True)
def handle(call):
    # MERGE data for answer:
    answer = {'date': date.today(),
              'time':	datetime.now().strftime("%H:%M:%S"),
              'username': call.message.chat.username,
              'event': str(call.message.text),
              'event_description': call.data,
              'first_name': call.message.chat.first_name,
              'last_name': call.message.chat.last_name,
              'chat_id': call.message.chat.id}

    if(os.path.exists('data.csv') == True):
        df = pd.read_csv("data.csv").append(answer, ignore_index = True)
        df.to_csv("data.csv", index=False)
    else:
        print("Error: not find data.csv")

    # reply_to_user = "üî∫" + str(date.today()) + " " + str(call.message.text) + " : *" + str(call.data) + "*  "
    reply_to_user = "üî∏" + str(date.today()) + " " + str(call.message.text) + " : *" + str(call.data) + "*  "

    bot.send_message(call.message.chat.id, reply_to_user,
                     parse_mode = telegram.ParseMode.MARKDOWN)


@bot.message_handler(commands=["newsletter"])
def answer(message):
    if (message.from_user.id == 809104544):
        # newsletter = '‚úåÔ∏è *–ü—Ä–∏–≤–µ—Ç*, —ç—Ç–æ –ø–∏—à–µ—Ç –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ HR –∫–æ–º–∞–Ω–¥–∏ S-PRO | –º—ã —Ç–µ–±—è –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ —Å–µ–π—á–∞—Å –¥–µ–ª–∞–µ–º —Ç–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø—Ä–æ—Å–∞ :). üí≠'
        newsletter = '‚úåÔ∏è *–ü—Ä–∏–≤—ñ—Ç*'
        all_users = pd.read_csv('data.csv')['chat_id'].unique()
        for i in all_users:
            try:
                bot.send_message(i,
                                 newsletter,
                                 parse_mode=telegram.ParseMode.MARKDOWN)
                today_box.today_send(i)
                print("i:", i, " | message send | done ")
            except:
                continue


# Reply to user-employee answer:
@bot.message_handler(content_types=['text'])
def read_text(message):
    txt = message.text
    print("\n", date.today(), " ", datetime.now().strftime("%H:%M:%S"))
    print(message.chat.username, " ", " | Answer:")
    print(txt)

    answer_text = {'date': date.today(),
                   'time':	datetime.now().strftime("%H:%M:%S"),
                   'username': message.chat.username,
                   'event': 'message',
                   'event_description': txt,
                   'first_name': message.chat.first_name,
                   'last_name': message.chat.last_name,
                   'chat_id': message.chat.id }

    if(os.path.exists('data.csv') == True):
        df = pd.read_csv("data.csv").append(answer_text, ignore_index = True)
        df.to_csv("data.csv", index=False, encoding='utf-8')
    else:
        print("Error: not find data.csv")
    bot.send_message(message.chat.id, "–î—è–∫—É—é –∑–∞ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ HR –∫–æ–º–∞–Ω–¥—ñ!")



# run bot
bot.polling(none_stop=True, interval=0)
