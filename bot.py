# QUESTION:
#  –ù–∞–º –Ω—É–∂–Ω—ã –≤–æ–ø—Ä–æ—Å—ã:
#  1. –ì–¥–µ —Ç—ã —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?
#  2. –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ?
#  3. –ú–æ–∂–µ—à—å –ª–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞—Ç—å ( —Ñ—É–ª–ª/–ø–∞—Ä—Ç/–Ω–µ—Ç)?
#  4. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ª–∏ —Ç–µ–±–µ –∫–∞–∫–∞—è-—Ç–æ –æ—Ä–≥ –ø–æ–º–æ—â—å?

# Import Library
import telegram
import telebot
import pandas as pd

import os.path

from telebot import types
from datetime import date
from datetime import datetime


bot = telebot.TeleBot("your token")

print("\nToday's date:", date.today())


# init user-employee ‚òëÔ∏è
@bot.message_handler(commands=["start"])
def start(m, res=False):
    bot.send_message(m.chat.id,
                     '‚úåÔ∏è *–ü—Ä–∏–≤–µ—Ç*, –Ω–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏. üí≠ \n  –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –Ω–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–∞–∂–∏–º–∞–π –∫–æ–º–∞–Ω–¥—É üîª /today üîª',
                     parse_mode=telegram.ParseMode.MARKDOWN)

    user = {'date': date.today(),
              'time':	datetime.now().strftime("%H:%M:%S"),
              'username': m.chat.username,
              'event': 'connect',
              'event_description': 'done',
              'first_name': m.chat.first_name,
              'last_name': m.chat.last_name,
              'chat_id': m.chat.id}

    # Show new connection:
    print("\ndate:", date.today(), " | –ó–∞–∫–æ–Ω–µ–∫—Ç–∏–≤—Å—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ | ",  m.chat.username)

    if(os.path.exists('data.csv') == True):
        pd.read_csv("data.csv").append(user, ignore_index = True).to_csv("data.csv", index=False)
    else:
        print("Error: not find data.csv")

    # if(os.path.exists('user_connected.csv') == True):
    #    pd.read_csv("user_connected.csv").append(user, ignore_index = True).to_csv("user_connected.csv", index=False)
    # else:
        # print("Error: not find user_connected.csv")
        # pd.DataFrame(data=user).to_csv("user_connected.csv", index=False)


# COMMAND: today ‚òëÔ∏è
# send questions for answer
@bot.message_handler(commands=["today"])
def today(m, res=False):
    # bot.delete_message(m.chat.id, m.message_id)
    markup = types.InlineKeyboardMarkup()
    buttonA = types.InlineKeyboardButton('Full-time', callback_data='full-time')
    buttonB = types.InlineKeyboardButton('Part-time', callback_data='part-time')
    buttonC = types.InlineKeyboardButton("Can't Work", callback_data="can't work")

    markup.row(buttonA, buttonB, buttonC)

    bot.send_message(m.chat.id,
                "–î–∞–π, –ø–æ–∂–∞–ª—É—Å—Ç–∞, –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã \n üîπ 1. –ì–¥–µ —Ç—ã —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ *–Ω–∞—Ö–æ–¥–∏—à—å—Å—è*? \n üîπ 2. –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–µ *—Å–æ—Å—Ç–æ—è–Ω–∏–µ* ? ( –æ—Ç 0 –∫ 10 ) \n üîπ 3. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ª–∏ —Ç–µ–±–µ –∫–∞–∫–∞—è-—Ç–æ –æ—Ä–≥ *–ø–æ–º–æ—â—å*?",
                parse_mode=telegram.ParseMode.MARKDOWN,
                reply_markup=markup)


# Question: Can you work today? ‚òëÔ∏è
# SAVE ANSWER
@bot.callback_query_handler(lambda call: True)
def handle(call):
    # MERGE data for answer:
    answer = {'date': date.today(),
              'time':	datetime.now().strftime("%H:%M:%S"),
              'username': call.message.chat.username,
              'event': 'typework',
              'event_description': call.data,
              'first_name': call.message.chat.first_name,
              'last_name': call.message.chat.last_name,
              'chat_id': call.message.chat.id}

    if(os.path.exists('data.csv') == True):
        pd.read_csv("data.csv").append(answer, ignore_index = True).to_csv("data.csv", index=False)
    else:
        print("Error: not find data.csv")

    # if(os.path.exists('typework.csv') == True):
        # pd.read_csv("typework.csv").append(answer, ignore_index = True).to_csv("typework.csv", index=False)
    # else:
        # print("Error: not find typework.csv")
        # pd.DataFrame(data=answer).to_csv("type_work_dataset.csv", index=False)


# Reply to user-employee answer:
@bot.message_handler(content_types=['text'])
def read_text(message):
    txt = message.text
    print("\n", date.today(), " ", datetime.now().strftime("%H:%M:%S"))
    print(message.chat.username, " ", " | Answer:")
    print(txt)

    answer_text = {'date': date.today(),
                   'time':	datetime.now().strftime("%H:%M:%S"),
                   'username': message.chat.username,
                   'event': 'message',
                   'event_description': txt,
                   'first_name': message.chat.first_name,
                   'last_name': message.chat.last_name,
                   'chat_id': message.chat.id }

    if(os.path.exists('data.csv') == True):
        pd.read_csv("data.csv").append(answer_text, ignore_index = True).to_csv("data.csv", index=False, encoding='utf-8')
    else:
        print("Error: not find data.csv")

    # if(os.path.exists('messages.csv') == True):
    #    pd.read_csv("messages.csv").append(answer_text, ignore_index = True).to_csv("messages.csv", index=False, encoding='utf-8')
    # else:
        # print("Error: not find messages.csv")
        # pd.DataFrame(data=answer_text).to_csv("messages.csv", index=False)

    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç")


# run bot
bot.polling(none_stop=True, interval=0)
